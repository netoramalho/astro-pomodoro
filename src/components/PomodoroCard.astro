<div class="pomodoro-card">
    <div class="pomodoro-card__picker">
        <div id="pick_5">5min</div>
        <div id="pick_15">15min</div>
        <div id="pick_25" class="active">25min</div>
    </div>
    <div id="timer" class="pomodoro-card__timer">
        25:00
    </div>
    <button id="action" type="button" class="pomodoro-card__start">
        Start
    </button>
</div>

<script is:inline>
    let durationInMinutes = 25
    let interval = false
    let beatInterval = false

    const getFormattedTimer = (mins, secs) => {
        const minutes = mins < 10 ? `0${mins}` : mins
        const seconds = secs < 10 ? `0${secs}` : secs
        return `${minutes}:${seconds}`
    }

    const oneBeat = () => {
        const context = new AudioContext()

        const gain = context.createGain()
        gain.gain.value = 0.5
        gain.connect(context.destination)
        
        const oscillator = context.createOscillator()
        oscillator.type = "sine"
        oscillator.frequency.value = 200
        oscillator.connect(gain)
        
        oscillator.start()
        setTimeout(() => oscillator.stop(), 300)
    }
    
    const playBeat = (time = 3000) => {
        beatInterval = setInterval(oneBeat, 300)
        setTimeout(() => clearInterval(beatInterval), time)
    }

    const onComplete = (silent) => {
        clearInterval(interval)
        interval = false
        document.getElementById('timer').textContent = getFormattedTimer(durationInMinutes, 0)
        document.getElementById('action').textContent = 'Start'
        enablePicker()
        if (!silent) {
            playBeat()
            document.title = 'time is up!'
        } else {
            document.title = 'Focus'
        }
    }

    let whenTimerEnds = false
    const updateTimer = () => {
        const distance = whenTimerEnds - (Date.now() - 600)
        if (distance <= 0) { return onComplete() }
        
        const mins = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60))
        const secs = Math.floor((distance % (1000 * 60)) / 1000)
        const time = getFormattedTimer(mins, secs)
        document.getElementById('timer').textContent = time
        document.title = time
    }

    const toggleTimer = async () => {
        if (interval) { return onComplete(true) }
        whenTimerEnds = new Date(Date.now() + durationInMinutes*60000)
        interval = setInterval(updateTimer, 1000)
        document.getElementById('action').textContent = 'Stop'
        disablePicker()
        playBeat(300)
        let screenLock = await getScreenLock()
    }

    document.getElementById('action').addEventListener('click', toggleTimer)

    const durationColors = new Map()
    durationColors.set(5, '190')
    durationColors.set(15, '210')
    durationColors.set(25, '263')

    const updateTimeDuration = (duration) => {
        if (interval) { return }
        durationInMinutes = duration
        document.getElementById('timer').textContent = `${durationInMinutes}:00`
        document.querySelector('.pomodoro-card__picker .active').classList.remove("active")
        document.getElementById(`pick_${duration}`).classList.add("active")
        document.querySelector(':root').style.setProperty('--color', durationColors.get(duration))
    }

    document.getElementById('pick_5').addEventListener('click', () => { updateTimeDuration(5) })
    document.getElementById('pick_15').addEventListener('click', () => { updateTimeDuration(15) })
    document.getElementById('pick_25').addEventListener('click', () => { updateTimeDuration(25) })

    const disablePicker = () => {
        document.querySelector('.pomodoro-card__picker').classList.add("pomodoro-card__picker--disabled")
    }

    const enablePicker = () => {
        document.querySelector('.pomodoro-card__picker').classList.remove("pomodoro-card__picker--disabled")
    }

    const getScreenLock = async () => {
        let screenLock;
        try {
            screenLock = await navigator.wakeLock.request('screen');
        } catch(err) {
            console.log(err.name, err.message);
        }
        return screenLock;
    }
</script>

<style lang="scss">
    .pomodoro-card {
        width: 100%;
        min-width: 290px;
        max-width: 500px;
        height: 442px;
        border-radius: 10px;
        background: rgba(217, 217, 217, 0.15);
        border: 1px solid rgba(255, 255, 255, 0.15);
        backdrop-filter: blur(10px);
        opacity: 0.01;
        transform: translateX(5%);
        animation: fade-left 400ms ease-in-out forwards;
        animation-delay: 200ms;

        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: space-around;

        @media (max-width: 800px) {
            height: 300px;
        }

        &__picker {
            display: flex;
            max-width: 349px;
            margin: 0 auto;
            width: 100%;
            border-radius: 30px;
            border: 1px solid rgba(255, 255, 255, 0.15);

            @media (max-width: 436px) {
                max-width: 90%;
            }
        }

        &__picker div {
            cursor: pointer;
            padding: 13px;
            flex: 1;
            text-align: center;
            font-size: 16px;
            font-style: italic;
            font-weight: 400;
            color: rgba(255, 255, 255, 0.8);

            &:hover {
                background: rgba(255, 255, 255, 0.08);
            }

            &:first-child {
                border-right: 1px solid rgba(255, 255, 255, 0.15);
                border-top-left-radius: 30px;
                border-bottom-left-radius: 30px;
            }

            &:last-child {
                border-left: 1px solid rgba(255, 255, 255, 0.15);
                border-top-right-radius: 30px;
                border-bottom-right-radius: 30px;
            }

            &.active {
                text-decoration-line: underline;
                text-underline-offset: 2px;
                background: rgba(255, 255, 255, 0.08);
            }
        }

        &__picker--disabled div {
            cursor: not-allowed;

            &:hover {
                background: inherit;
            }
        }

        &__timer {
            color: #FFFFFF;
            font-weight: 700;
            font-size: 100px;
            font-size: clamp(80px, 8vw, 100px);
            font-style: italic;
            width: 100%;
            text-align: center;
        }

        &__start {
            border: none;
            cursor: pointer;
            display: inline-block;
            background: hsl(var(--color) 72.22% 57.65%);
            border-radius: 30px;
            text-align: center;
            color: #FFFFFF;
            font-size: 16px;
            padding: 17px 50px;
            margin-top: 10px;

            &:hover {
                background: hsl(var(--color) 42.22% 57.65%);
            }
        }
    }
</style>